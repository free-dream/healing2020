// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/qiniu/token": {
            "get": {
                "description": "获取七牛的upToken",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "qiniu"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.Token"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/e.ErrMsgResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "个人页接口",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "perponalpage"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PersonalPage"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/e.ErrMsgResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "更新用户信息",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PutUserInf"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/e.ErrMsgResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/e.ErrMsgResponse"
                        }
                    }
                }
            }
        },
        "/user/hobby": {
            "get": {
                "description": "获取用户爱好",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hobby"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.Tag"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/e.ErrMsgResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "爱好选择接口",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hobby"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/e.ErrMsgResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/e.ErrMsgResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.PersonalPage": {
            "type": "object",
            "properties": {
                "Songs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Songs"
                    }
                },
                "admire": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Admire"
                    }
                },
                "avatar": {
                    "type": "string"
                },
                "background": {
                    "type": "string"
                },
                "more": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "requestSongs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RequestSongs"
                    }
                },
                "school": {
                    "type": "string"
                },
                "setting1": {
                    "type": "integer"
                },
                "setting2": {
                    "type": "integer"
                },
                "setting3": {
                    "type": "integer"
                }
            }
        },
        "controller.Tag": {
            "type": "object",
            "properties": {
                "tag1": {
                    "type": "integer"
                },
                "tag2": {
                    "type": "integer"
                },
                "tag3": {
                    "type": "integer"
                },
                "tag4": {
                    "type": "integer"
                },
                "tag5": {
                    "type": "integer"
                },
                "tag6": {
                    "type": "integer"
                },
                "tag7": {
                    "type": "integer"
                }
            }
        },
        "controller.Token": {
            "type": "object",
            "properties": {
                "uptoken": {
                    "type": "string"
                }
            }
        },
        "e.ErrMsgResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Admire": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "song": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "models.RequestSongs": {
            "type": "object",
            "properties": {
                "song": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "models.Songs": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "song": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "healing2020",
	Description: "2020治愈系",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
